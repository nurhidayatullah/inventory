<?php


/**
 * Base class that represents a query for the 'customers' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.7.0 on:
 *
 * 07/21/15 02:00:07
 *
 * @method CustomersQuery orderById($order = Criteria::ASC) Order by the id column
 * @method CustomersQuery orderByNamaCust($order = Criteria::ASC) Order by the nama_cust column
 * @method CustomersQuery orderByAlamat($order = Criteria::ASC) Order by the alamat column
 * @method CustomersQuery orderByIdKota($order = Criteria::ASC) Order by the id_kota column
 * @method CustomersQuery orderByTelp($order = Criteria::ASC) Order by the telp column
 *
 * @method CustomersQuery groupById() Group by the id column
 * @method CustomersQuery groupByNamaCust() Group by the nama_cust column
 * @method CustomersQuery groupByAlamat() Group by the alamat column
 * @method CustomersQuery groupByIdKota() Group by the id_kota column
 * @method CustomersQuery groupByTelp() Group by the telp column
 *
 * @method CustomersQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method CustomersQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method CustomersQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method CustomersQuery leftJoinKota($relationAlias = null) Adds a LEFT JOIN clause to the query using the Kota relation
 * @method CustomersQuery rightJoinKota($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Kota relation
 * @method CustomersQuery innerJoinKota($relationAlias = null) Adds a INNER JOIN clause to the query using the Kota relation
 *
 * @method CustomersQuery leftJoinTransaksi($relationAlias = null) Adds a LEFT JOIN clause to the query using the Transaksi relation
 * @method CustomersQuery rightJoinTransaksi($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Transaksi relation
 * @method CustomersQuery innerJoinTransaksi($relationAlias = null) Adds a INNER JOIN clause to the query using the Transaksi relation
 *
 * @method Customers findOne(PropelPDO $con = null) Return the first Customers matching the query
 * @method Customers findOneOrCreate(PropelPDO $con = null) Return the first Customers matching the query, or a new Customers object populated from the query conditions when no match is found
 *
 * @method Customers findOneByNamaCust(string $nama_cust) Return the first Customers filtered by the nama_cust column
 * @method Customers findOneByAlamat(string $alamat) Return the first Customers filtered by the alamat column
 * @method Customers findOneByIdKota(int $id_kota) Return the first Customers filtered by the id_kota column
 * @method Customers findOneByTelp(string $telp) Return the first Customers filtered by the telp column
 *
 * @method array findById(int $id) Return Customers objects filtered by the id column
 * @method array findByNamaCust(string $nama_cust) Return Customers objects filtered by the nama_cust column
 * @method array findByAlamat(string $alamat) Return Customers objects filtered by the alamat column
 * @method array findByIdKota(int $id_kota) Return Customers objects filtered by the id_kota column
 * @method array findByTelp(string $telp) Return Customers objects filtered by the telp column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseCustomersQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseCustomersQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = null, $modelName = null, $modelAlias = null)
    {
        if (null === $dbName) {
            $dbName = 'propel';
        }
        if (null === $modelName) {
            $modelName = 'Customers';
        }
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new CustomersQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param   CustomersQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return CustomersQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof CustomersQuery) {
            return $criteria;
        }
        $query = new CustomersQuery(null, null, $modelAlias);

        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Customers|Customers[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = CustomersPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is already in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(CustomersPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Alias of findPk to use instance pooling
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return                 Customers A model object, or null if the key is not found
     * @throws PropelException
     */
     public function findOneById($key, $con = null)
     {
        return $this->findPk($key, $con);
     }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return                 Customers A model object, or null if the key is not found
     * @throws PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `id`, `nama_cust`, `alamat`, `id_kota`, `telp` FROM `customers` WHERE `id` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Customers();
            $obj->hydrate($row);
            CustomersPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Customers|Customers[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Customers[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return CustomersQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(CustomersPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return CustomersQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(CustomersPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id >= 12
     * $query->filterById(array('max' => 12)); // WHERE id <= 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CustomersQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id)) {
            $useMinMax = false;
            if (isset($id['min'])) {
                $this->addUsingAlias(CustomersPeer::ID, $id['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($id['max'])) {
                $this->addUsingAlias(CustomersPeer::ID, $id['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(CustomersPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the nama_cust column
     *
     * Example usage:
     * <code>
     * $query->filterByNamaCust('fooValue');   // WHERE nama_cust = 'fooValue'
     * $query->filterByNamaCust('%fooValue%'); // WHERE nama_cust LIKE '%fooValue%'
     * </code>
     *
     * @param     string $namaCust The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CustomersQuery The current query, for fluid interface
     */
    public function filterByNamaCust($namaCust = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($namaCust)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $namaCust)) {
                $namaCust = str_replace('*', '%', $namaCust);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(CustomersPeer::NAMA_CUST, $namaCust, $comparison);
    }

    /**
     * Filter the query on the alamat column
     *
     * Example usage:
     * <code>
     * $query->filterByAlamat('fooValue');   // WHERE alamat = 'fooValue'
     * $query->filterByAlamat('%fooValue%'); // WHERE alamat LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alamat The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CustomersQuery The current query, for fluid interface
     */
    public function filterByAlamat($alamat = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alamat)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alamat)) {
                $alamat = str_replace('*', '%', $alamat);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(CustomersPeer::ALAMAT, $alamat, $comparison);
    }

    /**
     * Filter the query on the id_kota column
     *
     * Example usage:
     * <code>
     * $query->filterByIdKota(1234); // WHERE id_kota = 1234
     * $query->filterByIdKota(array(12, 34)); // WHERE id_kota IN (12, 34)
     * $query->filterByIdKota(array('min' => 12)); // WHERE id_kota >= 12
     * $query->filterByIdKota(array('max' => 12)); // WHERE id_kota <= 12
     * </code>
     *
     * @see       filterByKota()
     *
     * @param     mixed $idKota The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CustomersQuery The current query, for fluid interface
     */
    public function filterByIdKota($idKota = null, $comparison = null)
    {
        if (is_array($idKota)) {
            $useMinMax = false;
            if (isset($idKota['min'])) {
                $this->addUsingAlias(CustomersPeer::ID_KOTA, $idKota['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idKota['max'])) {
                $this->addUsingAlias(CustomersPeer::ID_KOTA, $idKota['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(CustomersPeer::ID_KOTA, $idKota, $comparison);
    }

    /**
     * Filter the query on the telp column
     *
     * Example usage:
     * <code>
     * $query->filterByTelp('fooValue');   // WHERE telp = 'fooValue'
     * $query->filterByTelp('%fooValue%'); // WHERE telp LIKE '%fooValue%'
     * </code>
     *
     * @param     string $telp The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return CustomersQuery The current query, for fluid interface
     */
    public function filterByTelp($telp = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($telp)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $telp)) {
                $telp = str_replace('*', '%', $telp);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(CustomersPeer::TELP, $telp, $comparison);
    }

    /**
     * Filter the query by a related Kota object
     *
     * @param   Kota|PropelObjectCollection $kota The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 CustomersQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByKota($kota, $comparison = null)
    {
        if ($kota instanceof Kota) {
            return $this
                ->addUsingAlias(CustomersPeer::ID_KOTA, $kota->getId(), $comparison);
        } elseif ($kota instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(CustomersPeer::ID_KOTA, $kota->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByKota() only accepts arguments of type Kota or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Kota relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return CustomersQuery The current query, for fluid interface
     */
    public function joinKota($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Kota');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Kota');
        }

        return $this;
    }

    /**
     * Use the Kota relation Kota object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   KotaQuery A secondary query class using the current class as primary query
     */
    public function useKotaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinKota($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Kota', 'KotaQuery');
    }

    /**
     * Filter the query by a related Transaksi object
     *
     * @param   Transaksi|PropelObjectCollection $transaksi  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 CustomersQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByTransaksi($transaksi, $comparison = null)
    {
        if ($transaksi instanceof Transaksi) {
            return $this
                ->addUsingAlias(CustomersPeer::ID, $transaksi->getIdCustomers(), $comparison);
        } elseif ($transaksi instanceof PropelObjectCollection) {
            return $this
                ->useTransaksiQuery()
                ->filterByPrimaryKeys($transaksi->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTransaksi() only accepts arguments of type Transaksi or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Transaksi relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return CustomersQuery The current query, for fluid interface
     */
    public function joinTransaksi($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Transaksi');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Transaksi');
        }

        return $this;
    }

    /**
     * Use the Transaksi relation Transaksi object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TransaksiQuery A secondary query class using the current class as primary query
     */
    public function useTransaksiQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTransaksi($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Transaksi', 'TransaksiQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Customers $customers Object to remove from the list of results
     *
     * @return CustomersQuery The current query, for fluid interface
     */
    public function prune($customers = null)
    {
        if ($customers) {
            $this->addUsingAlias(CustomersPeer::ID, $customers->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
