<?php


/**
 * Base class that represents a query for the 'barang' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.7.0 on:
 *
 * 07/21/15 02:00:06
 *
 * @method BarangQuery orderById($order = Criteria::ASC) Order by the id column
 * @method BarangQuery orderByNamaBarang($order = Criteria::ASC) Order by the nama_barang column
 * @method BarangQuery orderByIdKategori($order = Criteria::ASC) Order by the id_kategori column
 * @method BarangQuery orderByStock($order = Criteria::ASC) Order by the stock column
 * @method BarangQuery orderByIdKemasan($order = Criteria::ASC) Order by the id_kemasan column
 * @method BarangQuery orderByIdProdusen($order = Criteria::ASC) Order by the id_produsen column
 * @method BarangQuery orderByDescription($order = Criteria::ASC) Order by the description column
 *
 * @method BarangQuery groupById() Group by the id column
 * @method BarangQuery groupByNamaBarang() Group by the nama_barang column
 * @method BarangQuery groupByIdKategori() Group by the id_kategori column
 * @method BarangQuery groupByStock() Group by the stock column
 * @method BarangQuery groupByIdKemasan() Group by the id_kemasan column
 * @method BarangQuery groupByIdProdusen() Group by the id_produsen column
 * @method BarangQuery groupByDescription() Group by the description column
 *
 * @method BarangQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method BarangQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method BarangQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method BarangQuery leftJoinKategori($relationAlias = null) Adds a LEFT JOIN clause to the query using the Kategori relation
 * @method BarangQuery rightJoinKategori($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Kategori relation
 * @method BarangQuery innerJoinKategori($relationAlias = null) Adds a INNER JOIN clause to the query using the Kategori relation
 *
 * @method BarangQuery leftJoinKemasan($relationAlias = null) Adds a LEFT JOIN clause to the query using the Kemasan relation
 * @method BarangQuery rightJoinKemasan($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Kemasan relation
 * @method BarangQuery innerJoinKemasan($relationAlias = null) Adds a INNER JOIN clause to the query using the Kemasan relation
 *
 * @method BarangQuery leftJoinProdusen($relationAlias = null) Adds a LEFT JOIN clause to the query using the Produsen relation
 * @method BarangQuery rightJoinProdusen($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Produsen relation
 * @method BarangQuery innerJoinProdusen($relationAlias = null) Adds a INNER JOIN clause to the query using the Produsen relation
 *
 * @method BarangQuery leftJoinDetailBarangMasuk($relationAlias = null) Adds a LEFT JOIN clause to the query using the DetailBarangMasuk relation
 * @method BarangQuery rightJoinDetailBarangMasuk($relationAlias = null) Adds a RIGHT JOIN clause to the query using the DetailBarangMasuk relation
 * @method BarangQuery innerJoinDetailBarangMasuk($relationAlias = null) Adds a INNER JOIN clause to the query using the DetailBarangMasuk relation
 *
 * @method BarangQuery leftJoinDetailTransaksi($relationAlias = null) Adds a LEFT JOIN clause to the query using the DetailTransaksi relation
 * @method BarangQuery rightJoinDetailTransaksi($relationAlias = null) Adds a RIGHT JOIN clause to the query using the DetailTransaksi relation
 * @method BarangQuery innerJoinDetailTransaksi($relationAlias = null) Adds a INNER JOIN clause to the query using the DetailTransaksi relation
 *
 * @method BarangQuery leftJoinHarga($relationAlias = null) Adds a LEFT JOIN clause to the query using the Harga relation
 * @method BarangQuery rightJoinHarga($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Harga relation
 * @method BarangQuery innerJoinHarga($relationAlias = null) Adds a INNER JOIN clause to the query using the Harga relation
 *
 * @method BarangQuery leftJoinLinkBarangRak($relationAlias = null) Adds a LEFT JOIN clause to the query using the LinkBarangRak relation
 * @method BarangQuery rightJoinLinkBarangRak($relationAlias = null) Adds a RIGHT JOIN clause to the query using the LinkBarangRak relation
 * @method BarangQuery innerJoinLinkBarangRak($relationAlias = null) Adds a INNER JOIN clause to the query using the LinkBarangRak relation
 *
 * @method BarangQuery leftJoinLogBarang($relationAlias = null) Adds a LEFT JOIN clause to the query using the LogBarang relation
 * @method BarangQuery rightJoinLogBarang($relationAlias = null) Adds a RIGHT JOIN clause to the query using the LogBarang relation
 * @method BarangQuery innerJoinLogBarang($relationAlias = null) Adds a INNER JOIN clause to the query using the LogBarang relation
 *
 * @method Barang findOne(PropelPDO $con = null) Return the first Barang matching the query
 * @method Barang findOneOrCreate(PropelPDO $con = null) Return the first Barang matching the query, or a new Barang object populated from the query conditions when no match is found
 *
 * @method Barang findOneByNamaBarang(string $nama_barang) Return the first Barang filtered by the nama_barang column
 * @method Barang findOneByIdKategori(int $id_kategori) Return the first Barang filtered by the id_kategori column
 * @method Barang findOneByStock(int $stock) Return the first Barang filtered by the stock column
 * @method Barang findOneByIdKemasan(int $id_kemasan) Return the first Barang filtered by the id_kemasan column
 * @method Barang findOneByIdProdusen(int $id_produsen) Return the first Barang filtered by the id_produsen column
 * @method Barang findOneByDescription(string $description) Return the first Barang filtered by the description column
 *
 * @method array findById(int $id) Return Barang objects filtered by the id column
 * @method array findByNamaBarang(string $nama_barang) Return Barang objects filtered by the nama_barang column
 * @method array findByIdKategori(int $id_kategori) Return Barang objects filtered by the id_kategori column
 * @method array findByStock(int $stock) Return Barang objects filtered by the stock column
 * @method array findByIdKemasan(int $id_kemasan) Return Barang objects filtered by the id_kemasan column
 * @method array findByIdProdusen(int $id_produsen) Return Barang objects filtered by the id_produsen column
 * @method array findByDescription(string $description) Return Barang objects filtered by the description column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseBarangQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseBarangQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = null, $modelName = null, $modelAlias = null)
    {
        if (null === $dbName) {
            $dbName = 'propel';
        }
        if (null === $modelName) {
            $modelName = 'Barang';
        }
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new BarangQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param   BarangQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return BarangQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof BarangQuery) {
            return $criteria;
        }
        $query = new BarangQuery(null, null, $modelAlias);

        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Barang|Barang[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = BarangPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is already in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(BarangPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Alias of findPk to use instance pooling
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return                 Barang A model object, or null if the key is not found
     * @throws PropelException
     */
     public function findOneById($key, $con = null)
     {
        return $this->findPk($key, $con);
     }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return                 Barang A model object, or null if the key is not found
     * @throws PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `id`, `nama_barang`, `id_kategori`, `stock`, `id_kemasan`, `id_produsen`, `description` FROM `barang` WHERE `id` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Barang();
            $obj->hydrate($row);
            BarangPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Barang|Barang[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Barang[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(BarangPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(BarangPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id >= 12
     * $query->filterById(array('max' => 12)); // WHERE id <= 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id)) {
            $useMinMax = false;
            if (isset($id['min'])) {
                $this->addUsingAlias(BarangPeer::ID, $id['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($id['max'])) {
                $this->addUsingAlias(BarangPeer::ID, $id['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BarangPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the nama_barang column
     *
     * Example usage:
     * <code>
     * $query->filterByNamaBarang('fooValue');   // WHERE nama_barang = 'fooValue'
     * $query->filterByNamaBarang('%fooValue%'); // WHERE nama_barang LIKE '%fooValue%'
     * </code>
     *
     * @param     string $namaBarang The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function filterByNamaBarang($namaBarang = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($namaBarang)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $namaBarang)) {
                $namaBarang = str_replace('*', '%', $namaBarang);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(BarangPeer::NAMA_BARANG, $namaBarang, $comparison);
    }

    /**
     * Filter the query on the id_kategori column
     *
     * Example usage:
     * <code>
     * $query->filterByIdKategori(1234); // WHERE id_kategori = 1234
     * $query->filterByIdKategori(array(12, 34)); // WHERE id_kategori IN (12, 34)
     * $query->filterByIdKategori(array('min' => 12)); // WHERE id_kategori >= 12
     * $query->filterByIdKategori(array('max' => 12)); // WHERE id_kategori <= 12
     * </code>
     *
     * @see       filterByKategori()
     *
     * @param     mixed $idKategori The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function filterByIdKategori($idKategori = null, $comparison = null)
    {
        if (is_array($idKategori)) {
            $useMinMax = false;
            if (isset($idKategori['min'])) {
                $this->addUsingAlias(BarangPeer::ID_KATEGORI, $idKategori['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idKategori['max'])) {
                $this->addUsingAlias(BarangPeer::ID_KATEGORI, $idKategori['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BarangPeer::ID_KATEGORI, $idKategori, $comparison);
    }

    /**
     * Filter the query on the stock column
     *
     * Example usage:
     * <code>
     * $query->filterByStock(1234); // WHERE stock = 1234
     * $query->filterByStock(array(12, 34)); // WHERE stock IN (12, 34)
     * $query->filterByStock(array('min' => 12)); // WHERE stock >= 12
     * $query->filterByStock(array('max' => 12)); // WHERE stock <= 12
     * </code>
     *
     * @param     mixed $stock The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function filterByStock($stock = null, $comparison = null)
    {
        if (is_array($stock)) {
            $useMinMax = false;
            if (isset($stock['min'])) {
                $this->addUsingAlias(BarangPeer::STOCK, $stock['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($stock['max'])) {
                $this->addUsingAlias(BarangPeer::STOCK, $stock['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BarangPeer::STOCK, $stock, $comparison);
    }

    /**
     * Filter the query on the id_kemasan column
     *
     * Example usage:
     * <code>
     * $query->filterByIdKemasan(1234); // WHERE id_kemasan = 1234
     * $query->filterByIdKemasan(array(12, 34)); // WHERE id_kemasan IN (12, 34)
     * $query->filterByIdKemasan(array('min' => 12)); // WHERE id_kemasan >= 12
     * $query->filterByIdKemasan(array('max' => 12)); // WHERE id_kemasan <= 12
     * </code>
     *
     * @see       filterByKemasan()
     *
     * @param     mixed $idKemasan The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function filterByIdKemasan($idKemasan = null, $comparison = null)
    {
        if (is_array($idKemasan)) {
            $useMinMax = false;
            if (isset($idKemasan['min'])) {
                $this->addUsingAlias(BarangPeer::ID_KEMASAN, $idKemasan['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idKemasan['max'])) {
                $this->addUsingAlias(BarangPeer::ID_KEMASAN, $idKemasan['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BarangPeer::ID_KEMASAN, $idKemasan, $comparison);
    }

    /**
     * Filter the query on the id_produsen column
     *
     * Example usage:
     * <code>
     * $query->filterByIdProdusen(1234); // WHERE id_produsen = 1234
     * $query->filterByIdProdusen(array(12, 34)); // WHERE id_produsen IN (12, 34)
     * $query->filterByIdProdusen(array('min' => 12)); // WHERE id_produsen >= 12
     * $query->filterByIdProdusen(array('max' => 12)); // WHERE id_produsen <= 12
     * </code>
     *
     * @see       filterByProdusen()
     *
     * @param     mixed $idProdusen The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function filterByIdProdusen($idProdusen = null, $comparison = null)
    {
        if (is_array($idProdusen)) {
            $useMinMax = false;
            if (isset($idProdusen['min'])) {
                $this->addUsingAlias(BarangPeer::ID_PRODUSEN, $idProdusen['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idProdusen['max'])) {
                $this->addUsingAlias(BarangPeer::ID_PRODUSEN, $idProdusen['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BarangPeer::ID_PRODUSEN, $idProdusen, $comparison);
    }

    /**
     * Filter the query on the description column
     *
     * Example usage:
     * <code>
     * $query->filterByDescription('fooValue');   // WHERE description = 'fooValue'
     * $query->filterByDescription('%fooValue%'); // WHERE description LIKE '%fooValue%'
     * </code>
     *
     * @param     string $description The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function filterByDescription($description = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($description)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $description)) {
                $description = str_replace('*', '%', $description);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(BarangPeer::DESCRIPTION, $description, $comparison);
    }

    /**
     * Filter the query by a related Kategori object
     *
     * @param   Kategori|PropelObjectCollection $kategori The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 BarangQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByKategori($kategori, $comparison = null)
    {
        if ($kategori instanceof Kategori) {
            return $this
                ->addUsingAlias(BarangPeer::ID_KATEGORI, $kategori->getId(), $comparison);
        } elseif ($kategori instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(BarangPeer::ID_KATEGORI, $kategori->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByKategori() only accepts arguments of type Kategori or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Kategori relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function joinKategori($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Kategori');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Kategori');
        }

        return $this;
    }

    /**
     * Use the Kategori relation Kategori object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   KategoriQuery A secondary query class using the current class as primary query
     */
    public function useKategoriQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinKategori($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Kategori', 'KategoriQuery');
    }

    /**
     * Filter the query by a related Kemasan object
     *
     * @param   Kemasan|PropelObjectCollection $kemasan The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 BarangQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByKemasan($kemasan, $comparison = null)
    {
        if ($kemasan instanceof Kemasan) {
            return $this
                ->addUsingAlias(BarangPeer::ID_KEMASAN, $kemasan->getId(), $comparison);
        } elseif ($kemasan instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(BarangPeer::ID_KEMASAN, $kemasan->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByKemasan() only accepts arguments of type Kemasan or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Kemasan relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function joinKemasan($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Kemasan');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Kemasan');
        }

        return $this;
    }

    /**
     * Use the Kemasan relation Kemasan object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   KemasanQuery A secondary query class using the current class as primary query
     */
    public function useKemasanQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinKemasan($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Kemasan', 'KemasanQuery');
    }

    /**
     * Filter the query by a related Produsen object
     *
     * @param   Produsen|PropelObjectCollection $produsen The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 BarangQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByProdusen($produsen, $comparison = null)
    {
        if ($produsen instanceof Produsen) {
            return $this
                ->addUsingAlias(BarangPeer::ID_PRODUSEN, $produsen->getId(), $comparison);
        } elseif ($produsen instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(BarangPeer::ID_PRODUSEN, $produsen->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByProdusen() only accepts arguments of type Produsen or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Produsen relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function joinProdusen($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Produsen');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Produsen');
        }

        return $this;
    }

    /**
     * Use the Produsen relation Produsen object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   ProdusenQuery A secondary query class using the current class as primary query
     */
    public function useProdusenQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinProdusen($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Produsen', 'ProdusenQuery');
    }

    /**
     * Filter the query by a related DetailBarangMasuk object
     *
     * @param   DetailBarangMasuk|PropelObjectCollection $detailBarangMasuk  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 BarangQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByDetailBarangMasuk($detailBarangMasuk, $comparison = null)
    {
        if ($detailBarangMasuk instanceof DetailBarangMasuk) {
            return $this
                ->addUsingAlias(BarangPeer::ID, $detailBarangMasuk->getIdBarang(), $comparison);
        } elseif ($detailBarangMasuk instanceof PropelObjectCollection) {
            return $this
                ->useDetailBarangMasukQuery()
                ->filterByPrimaryKeys($detailBarangMasuk->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByDetailBarangMasuk() only accepts arguments of type DetailBarangMasuk or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the DetailBarangMasuk relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function joinDetailBarangMasuk($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('DetailBarangMasuk');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'DetailBarangMasuk');
        }

        return $this;
    }

    /**
     * Use the DetailBarangMasuk relation DetailBarangMasuk object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   DetailBarangMasukQuery A secondary query class using the current class as primary query
     */
    public function useDetailBarangMasukQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinDetailBarangMasuk($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'DetailBarangMasuk', 'DetailBarangMasukQuery');
    }

    /**
     * Filter the query by a related DetailTransaksi object
     *
     * @param   DetailTransaksi|PropelObjectCollection $detailTransaksi  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 BarangQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByDetailTransaksi($detailTransaksi, $comparison = null)
    {
        if ($detailTransaksi instanceof DetailTransaksi) {
            return $this
                ->addUsingAlias(BarangPeer::ID, $detailTransaksi->getIdBarang(), $comparison);
        } elseif ($detailTransaksi instanceof PropelObjectCollection) {
            return $this
                ->useDetailTransaksiQuery()
                ->filterByPrimaryKeys($detailTransaksi->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByDetailTransaksi() only accepts arguments of type DetailTransaksi or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the DetailTransaksi relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function joinDetailTransaksi($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('DetailTransaksi');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'DetailTransaksi');
        }

        return $this;
    }

    /**
     * Use the DetailTransaksi relation DetailTransaksi object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   DetailTransaksiQuery A secondary query class using the current class as primary query
     */
    public function useDetailTransaksiQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinDetailTransaksi($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'DetailTransaksi', 'DetailTransaksiQuery');
    }

    /**
     * Filter the query by a related Harga object
     *
     * @param   Harga|PropelObjectCollection $harga  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 BarangQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByHarga($harga, $comparison = null)
    {
        if ($harga instanceof Harga) {
            return $this
                ->addUsingAlias(BarangPeer::ID, $harga->getIdBarang(), $comparison);
        } elseif ($harga instanceof PropelObjectCollection) {
            return $this
                ->useHargaQuery()
                ->filterByPrimaryKeys($harga->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByHarga() only accepts arguments of type Harga or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Harga relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function joinHarga($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Harga');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Harga');
        }

        return $this;
    }

    /**
     * Use the Harga relation Harga object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   HargaQuery A secondary query class using the current class as primary query
     */
    public function useHargaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinHarga($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Harga', 'HargaQuery');
    }

    /**
     * Filter the query by a related LinkBarangRak object
     *
     * @param   LinkBarangRak|PropelObjectCollection $linkBarangRak  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 BarangQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByLinkBarangRak($linkBarangRak, $comparison = null)
    {
        if ($linkBarangRak instanceof LinkBarangRak) {
            return $this
                ->addUsingAlias(BarangPeer::ID, $linkBarangRak->getIdBarang(), $comparison);
        } elseif ($linkBarangRak instanceof PropelObjectCollection) {
            return $this
                ->useLinkBarangRakQuery()
                ->filterByPrimaryKeys($linkBarangRak->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByLinkBarangRak() only accepts arguments of type LinkBarangRak or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the LinkBarangRak relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function joinLinkBarangRak($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('LinkBarangRak');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'LinkBarangRak');
        }

        return $this;
    }

    /**
     * Use the LinkBarangRak relation LinkBarangRak object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   LinkBarangRakQuery A secondary query class using the current class as primary query
     */
    public function useLinkBarangRakQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinLinkBarangRak($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'LinkBarangRak', 'LinkBarangRakQuery');
    }

    /**
     * Filter the query by a related LogBarang object
     *
     * @param   LogBarang|PropelObjectCollection $logBarang  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 BarangQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByLogBarang($logBarang, $comparison = null)
    {
        if ($logBarang instanceof LogBarang) {
            return $this
                ->addUsingAlias(BarangPeer::ID, $logBarang->getIdBarang(), $comparison);
        } elseif ($logBarang instanceof PropelObjectCollection) {
            return $this
                ->useLogBarangQuery()
                ->filterByPrimaryKeys($logBarang->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByLogBarang() only accepts arguments of type LogBarang or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the LogBarang relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function joinLogBarang($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('LogBarang');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'LogBarang');
        }

        return $this;
    }

    /**
     * Use the LogBarang relation LogBarang object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   LogBarangQuery A secondary query class using the current class as primary query
     */
    public function useLogBarangQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinLogBarang($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'LogBarang', 'LogBarangQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Barang $barang Object to remove from the list of results
     *
     * @return BarangQuery The current query, for fluid interface
     */
    public function prune($barang = null)
    {
        if ($barang) {
            $this->addUsingAlias(BarangPeer::ID, $barang->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
