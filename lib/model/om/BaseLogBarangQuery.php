<?php


/**
 * Base class that represents a query for the 'log_barang' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.7.0 on:
 *
 * 07/21/15 02:00:11
 *
 * @method LogBarangQuery orderById($order = Criteria::ASC) Order by the id column
 * @method LogBarangQuery orderByTanggal($order = Criteria::ASC) Order by the tanggal column
 * @method LogBarangQuery orderByIdBarang($order = Criteria::ASC) Order by the id_barang column
 * @method LogBarangQuery orderByIn($order = Criteria::ASC) Order by the in column
 * @method LogBarangQuery orderByOut($order = Criteria::ASC) Order by the out column
 * @method LogBarangQuery orderBySaldo($order = Criteria::ASC) Order by the saldo column
 * @method LogBarangQuery orderByKeterangan($order = Criteria::ASC) Order by the keterangan column
 *
 * @method LogBarangQuery groupById() Group by the id column
 * @method LogBarangQuery groupByTanggal() Group by the tanggal column
 * @method LogBarangQuery groupByIdBarang() Group by the id_barang column
 * @method LogBarangQuery groupByIn() Group by the in column
 * @method LogBarangQuery groupByOut() Group by the out column
 * @method LogBarangQuery groupBySaldo() Group by the saldo column
 * @method LogBarangQuery groupByKeterangan() Group by the keterangan column
 *
 * @method LogBarangQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method LogBarangQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method LogBarangQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method LogBarangQuery leftJoinBarang($relationAlias = null) Adds a LEFT JOIN clause to the query using the Barang relation
 * @method LogBarangQuery rightJoinBarang($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Barang relation
 * @method LogBarangQuery innerJoinBarang($relationAlias = null) Adds a INNER JOIN clause to the query using the Barang relation
 *
 * @method LogBarang findOne(PropelPDO $con = null) Return the first LogBarang matching the query
 * @method LogBarang findOneOrCreate(PropelPDO $con = null) Return the first LogBarang matching the query, or a new LogBarang object populated from the query conditions when no match is found
 *
 * @method LogBarang findOneByTanggal(string $tanggal) Return the first LogBarang filtered by the tanggal column
 * @method LogBarang findOneByIdBarang(int $id_barang) Return the first LogBarang filtered by the id_barang column
 * @method LogBarang findOneByIn(int $in) Return the first LogBarang filtered by the in column
 * @method LogBarang findOneByOut(int $out) Return the first LogBarang filtered by the out column
 * @method LogBarang findOneBySaldo(int $saldo) Return the first LogBarang filtered by the saldo column
 * @method LogBarang findOneByKeterangan(string $keterangan) Return the first LogBarang filtered by the keterangan column
 *
 * @method array findById(int $id) Return LogBarang objects filtered by the id column
 * @method array findByTanggal(string $tanggal) Return LogBarang objects filtered by the tanggal column
 * @method array findByIdBarang(int $id_barang) Return LogBarang objects filtered by the id_barang column
 * @method array findByIn(int $in) Return LogBarang objects filtered by the in column
 * @method array findByOut(int $out) Return LogBarang objects filtered by the out column
 * @method array findBySaldo(int $saldo) Return LogBarang objects filtered by the saldo column
 * @method array findByKeterangan(string $keterangan) Return LogBarang objects filtered by the keterangan column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseLogBarangQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseLogBarangQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = null, $modelName = null, $modelAlias = null)
    {
        if (null === $dbName) {
            $dbName = 'propel';
        }
        if (null === $modelName) {
            $modelName = 'LogBarang';
        }
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new LogBarangQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param   LogBarangQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return LogBarangQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof LogBarangQuery) {
            return $criteria;
        }
        $query = new LogBarangQuery(null, null, $modelAlias);

        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   LogBarang|LogBarang[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = LogBarangPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is already in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(LogBarangPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Alias of findPk to use instance pooling
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return                 LogBarang A model object, or null if the key is not found
     * @throws PropelException
     */
     public function findOneById($key, $con = null)
     {
        return $this->findPk($key, $con);
     }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return                 LogBarang A model object, or null if the key is not found
     * @throws PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `id`, `tanggal`, `id_barang`, `in`, `out`, `saldo`, `keterangan` FROM `log_barang` WHERE `id` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new LogBarang();
            $obj->hydrate($row);
            LogBarangPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return LogBarang|LogBarang[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|LogBarang[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return LogBarangQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(LogBarangPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return LogBarangQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(LogBarangPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id >= 12
     * $query->filterById(array('max' => 12)); // WHERE id <= 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LogBarangQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id)) {
            $useMinMax = false;
            if (isset($id['min'])) {
                $this->addUsingAlias(LogBarangPeer::ID, $id['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($id['max'])) {
                $this->addUsingAlias(LogBarangPeer::ID, $id['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(LogBarangPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the tanggal column
     *
     * Example usage:
     * <code>
     * $query->filterByTanggal('2011-03-14'); // WHERE tanggal = '2011-03-14'
     * $query->filterByTanggal('now'); // WHERE tanggal = '2011-03-14'
     * $query->filterByTanggal(array('max' => 'yesterday')); // WHERE tanggal < '2011-03-13'
     * </code>
     *
     * @param     mixed $tanggal The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LogBarangQuery The current query, for fluid interface
     */
    public function filterByTanggal($tanggal = null, $comparison = null)
    {
        if (is_array($tanggal)) {
            $useMinMax = false;
            if (isset($tanggal['min'])) {
                $this->addUsingAlias(LogBarangPeer::TANGGAL, $tanggal['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($tanggal['max'])) {
                $this->addUsingAlias(LogBarangPeer::TANGGAL, $tanggal['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(LogBarangPeer::TANGGAL, $tanggal, $comparison);
    }

    /**
     * Filter the query on the id_barang column
     *
     * Example usage:
     * <code>
     * $query->filterByIdBarang(1234); // WHERE id_barang = 1234
     * $query->filterByIdBarang(array(12, 34)); // WHERE id_barang IN (12, 34)
     * $query->filterByIdBarang(array('min' => 12)); // WHERE id_barang >= 12
     * $query->filterByIdBarang(array('max' => 12)); // WHERE id_barang <= 12
     * </code>
     *
     * @see       filterByBarang()
     *
     * @param     mixed $idBarang The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LogBarangQuery The current query, for fluid interface
     */
    public function filterByIdBarang($idBarang = null, $comparison = null)
    {
        if (is_array($idBarang)) {
            $useMinMax = false;
            if (isset($idBarang['min'])) {
                $this->addUsingAlias(LogBarangPeer::ID_BARANG, $idBarang['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idBarang['max'])) {
                $this->addUsingAlias(LogBarangPeer::ID_BARANG, $idBarang['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(LogBarangPeer::ID_BARANG, $idBarang, $comparison);
    }

    /**
     * Filter the query on the in column
     *
     * Example usage:
     * <code>
     * $query->filterByIn(1234); // WHERE in = 1234
     * $query->filterByIn(array(12, 34)); // WHERE in IN (12, 34)
     * $query->filterByIn(array('min' => 12)); // WHERE in >= 12
     * $query->filterByIn(array('max' => 12)); // WHERE in <= 12
     * </code>
     *
     * @param     mixed $in The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LogBarangQuery The current query, for fluid interface
     */
    public function filterByIn($in = null, $comparison = null)
    {
        if (is_array($in)) {
            $useMinMax = false;
            if (isset($in['min'])) {
                $this->addUsingAlias(LogBarangPeer::IN, $in['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($in['max'])) {
                $this->addUsingAlias(LogBarangPeer::IN, $in['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(LogBarangPeer::IN, $in, $comparison);
    }

    /**
     * Filter the query on the out column
     *
     * Example usage:
     * <code>
     * $query->filterByOut(1234); // WHERE out = 1234
     * $query->filterByOut(array(12, 34)); // WHERE out IN (12, 34)
     * $query->filterByOut(array('min' => 12)); // WHERE out >= 12
     * $query->filterByOut(array('max' => 12)); // WHERE out <= 12
     * </code>
     *
     * @param     mixed $out The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LogBarangQuery The current query, for fluid interface
     */
    public function filterByOut($out = null, $comparison = null)
    {
        if (is_array($out)) {
            $useMinMax = false;
            if (isset($out['min'])) {
                $this->addUsingAlias(LogBarangPeer::OUT, $out['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($out['max'])) {
                $this->addUsingAlias(LogBarangPeer::OUT, $out['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(LogBarangPeer::OUT, $out, $comparison);
    }

    /**
     * Filter the query on the saldo column
     *
     * Example usage:
     * <code>
     * $query->filterBySaldo(1234); // WHERE saldo = 1234
     * $query->filterBySaldo(array(12, 34)); // WHERE saldo IN (12, 34)
     * $query->filterBySaldo(array('min' => 12)); // WHERE saldo >= 12
     * $query->filterBySaldo(array('max' => 12)); // WHERE saldo <= 12
     * </code>
     *
     * @param     mixed $saldo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LogBarangQuery The current query, for fluid interface
     */
    public function filterBySaldo($saldo = null, $comparison = null)
    {
        if (is_array($saldo)) {
            $useMinMax = false;
            if (isset($saldo['min'])) {
                $this->addUsingAlias(LogBarangPeer::SALDO, $saldo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($saldo['max'])) {
                $this->addUsingAlias(LogBarangPeer::SALDO, $saldo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(LogBarangPeer::SALDO, $saldo, $comparison);
    }

    /**
     * Filter the query on the keterangan column
     *
     * Example usage:
     * <code>
     * $query->filterByKeterangan('fooValue');   // WHERE keterangan = 'fooValue'
     * $query->filterByKeterangan('%fooValue%'); // WHERE keterangan LIKE '%fooValue%'
     * </code>
     *
     * @param     string $keterangan The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LogBarangQuery The current query, for fluid interface
     */
    public function filterByKeterangan($keterangan = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($keterangan)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $keterangan)) {
                $keterangan = str_replace('*', '%', $keterangan);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(LogBarangPeer::KETERANGAN, $keterangan, $comparison);
    }

    /**
     * Filter the query by a related Barang object
     *
     * @param   Barang|PropelObjectCollection $barang The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return                 LogBarangQuery The current query, for fluid interface
     * @throws PropelException - if the provided filter is invalid.
     */
    public function filterByBarang($barang, $comparison = null)
    {
        if ($barang instanceof Barang) {
            return $this
                ->addUsingAlias(LogBarangPeer::ID_BARANG, $barang->getId(), $comparison);
        } elseif ($barang instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(LogBarangPeer::ID_BARANG, $barang->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByBarang() only accepts arguments of type Barang or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Barang relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return LogBarangQuery The current query, for fluid interface
     */
    public function joinBarang($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Barang');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Barang');
        }

        return $this;
    }

    /**
     * Use the Barang relation Barang object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   BarangQuery A secondary query class using the current class as primary query
     */
    public function useBarangQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinBarang($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Barang', 'BarangQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   LogBarang $logBarang Object to remove from the list of results
     *
     * @return LogBarangQuery The current query, for fluid interface
     */
    public function prune($logBarang = null)
    {
        if ($logBarang) {
            $this->addUsingAlias(LogBarangPeer::ID, $logBarang->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
